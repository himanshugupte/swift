// Simple function declaration

func myFunction1()
{
  print("This is a simple function.")
}

//Another way of writing this function

func myFunction2() -> () {
  print("This is yet another way of writing the above function!")
}

// By default, parameters of a function are constants

func whatsTheScore(score: Int) -> () {
  print("India has \(score) runs on board.")
}

whatsTheScore(score: 300)

// Functions that return values

func tellMyName(name: String) -> String {
  return name
}

print(tellMyName(name: "Jack Sparrow"))

// Using default parameter values

func defaultValues(a: Int = 200, b: Int = 300) {
  print("Multiplication of \(a) and \(b) yields: \(a*b)")
}

defaultValues(a: 5)
defaultValues(a: 10, b: 20)
defaultValues()
defaultValues(b: 20)

// Returning a tuple from a function

func gasPrices() -> (Double, Double, Double)
{
  return (10.0, 11.99, 9.88)
}

let outcome = gasPrices()
print("Prices of Petrol, Diesel and Kerosene are: \(outcome.0), \(outcome.1), \(outcome.2)")

// Receiving variable number of arguments

func sumOf(number: Int...) -> Int {
  var sum = 0
  for num in number {
    sum += num
  }
  return sum
}

print(sumOf(number: 10))
print(sumOf(number: 10, 20, 30))

// Nested Functions

func returnFifteen() -> Int {
  var y = 5
  func add() {
    y += 10
  }
  add()
  return y
}

print(returnFifteen())

// A function can return another function as value

func makeIncrementer() -> (Int -> Int) {
  func addOne(number: Int) -> Int {
    return 1 + number
  }
  return addOne
}

var increment = makeIncrementer()
print(increment(7))

// A function can take another function as one of it's arguments

func hasAnyMatches(list: [Int], condition: Int -> Bool) -> Bool {
  for item in list {
    if condition(item) {
      return true
    }
  }
  return false
}

func lessThanTen(number: Int) -> Bool {
  return number < 10
}

var numbers = [20, 13, 7, 12]
print(hasAnyMatches(list: numbers, condition: lessThanTen))
